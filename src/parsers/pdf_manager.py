import aiohttp
from pathlib import Path
from typing import Optional, Dict, Any
from .pdf_parser import extract_text_from_pdf, parse_curriculum_text, PDF_AVAILABLE

class PDFManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self, pdf_dir: Path):
        self.pdf_dir = pdf_dir
        self.pdf_dir.mkdir(parents=True, exist_ok=True)
    
    async def download_pdf(self, pdf_url: str, program_id: str) -> Optional[Path]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞"""
        filename = f"{program_id}_curriculum.pdf"
        pdf_path = self.pdf_dir / filename
        
        if pdf_path.exists():
            print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PDF: {pdf_path}")
            return pdf_path
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            async with aiohttp.ClientSession(headers=headers) as session:
                async with session.get(pdf_url) as response:
                    if response.status == 200:
                        with open(pdf_path, 'wb') as f:
                            async for chunk in response.content.iter_chunked(8192):
                                f.write(chunk)
                        
                        print(f"üì• PDF —Å–∫–∞—á–∞–Ω: {pdf_path}")
                        return pdf_path
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF: {e}")
        
        return None
    
    def find_local_pdf(self, program_id: str) -> Optional[Path]:
        """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º
        standard_patterns = [
            f"{program_id}_curriculum.pdf",
            f"{program_id}.pdf",
            f"curriculum_{program_id}.pdf"
        ]
        
        for pattern in standard_patterns:
            pdf_path = self.pdf_dir / pattern
            if pdf_path.exists():
                print(f"üìÑ –ù–∞–π–¥–µ–Ω PDF –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∏–º–µ–Ω–∏: {pdf_path}")
                return pdf_path
        
        # –ò—â–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        all_pdfs = list(self.pdf_dir.glob("*.pdf"))
        
        if not all_pdfs:
            print(f"üìÑ PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {self.pdf_dir}")
            return None
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(all_pdfs)}")
        for pdf in all_pdfs:
            print(f"   - {pdf.name}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        for pdf_file in all_pdfs:
            if self._is_pdf_for_program(pdf_file, program_id):
                print(f"üìÑ PDF {pdf_file.name} –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}")
                return pdf_file
        
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if all_pdfs:
            selected_pdf = all_pdfs[0]
            print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π PDF: {selected_pdf.name}")
            return selected_pdf
        
        return None
    
    def _is_pdf_for_program(self, pdf_path: Path, program_id: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ PDF –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        if not PDF_AVAILABLE:
            return False
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            text = self._extract_first_pages_text(pdf_path, max_pages=3)
            
            if not text:
                return False
            
            text_lower = text.lower()
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
            program_keywords = {
                'ai': [
                    '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
                    'artificial intelligence',
                    '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
                    '–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏',
                    'deep learning',
                    'computer vision',
                    'nlp'
                ],
                'ai_product': [
                    '–∏–∏ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö',
                    'ai product',
                    '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π',
                    'product management',
                    'ai-–ø—Ä–æ–¥—É–∫—Ç',
                    '–ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'
                ]
            }
            
            keywords = program_keywords.get(program_id, [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            matches = 0
            for keyword in keywords:
                if keyword in text_lower:
                    matches += 1
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Å—á–∏—Ç–∞–µ–º PDF –ø–æ–¥—Ö–æ–¥—è—â–∏–º
            return matches >= 1
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ PDF {pdf_path}: {e}")
            return False
    
    def _extract_first_pages_text(self, pdf_path: Path, max_pages: int = 3) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü PDF"""
        if not PDF_AVAILABLE:
            return ""
        
        text = ""
        
        # –ü—Ä–æ–±—É–µ–º pdfplumber
        try:
            import pdfplumber
            with pdfplumber.open(pdf_path) as pdf:
                for i, page in enumerate(pdf.pages[:max_pages]):
                    page_text = page.extract_text()
                    if page_text:
                        text += page_text + "\n"
            
            if text.strip():
                return text
        except Exception as e:
            print(f"   pdfplumber –æ—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–æ–±—É–µ–º PyPDF2
        try:
            import PyPDF2
            with open(pdf_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                for i in range(min(max_pages, len(pdf_reader.pages))):
                    page = pdf_reader.pages[i]
                    page_text = page.extract_text()
                    if page_text:
                        text += page_text + "\n"
        except Exception as e:
            print(f"   PyPDF2 –æ—à–∏–±–∫–∞: {e}")
        
        return text
    
    def parse_local_pdf(self, pdf_path: Path) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        if not PDF_AVAILABLE:
            return None
        
        try:
            text = extract_text_from_pdf(pdf_path)
            if text:
                return parse_curriculum_text(text)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF {pdf_path}: {e}")
        
        return None