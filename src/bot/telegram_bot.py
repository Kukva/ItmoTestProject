
import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotStates(StatesGroup):
    choosing_program = State()
    asking_questions = State()
    comparing_programs = State()

class ITMOBot:
    """Telegram –±–æ—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ò–¢–ú–û"""
    
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.data = self._load_data()
        self._register_handlers()
    
    def _load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
        try:
            # –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
            current_dir = Path(__file__).resolve()
            project_root = current_dir.parent.parent.parent
            data_file = project_root / "data" / "parsed" / "latest_complete.json"
            
            if data_file.exists():
                with open(data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                logger.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_file}")
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message(CommandStart())(self.start_handler)
        self.dp.message(Command("help"))(self.help_handler)
        self.dp.message(Command("programs"))(self.programs_handler)
        self.dp.message(Command("compare"))(self.compare_handler)
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.dp.callback_query(F.data.startswith("program_"))(self.program_info_handler)
        self.dp.callback_query(F.data == "compare_programs")(self.compare_programs_handler)
        self.dp.callback_query(F.data == "back_main")(self.back_to_main_handler)
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.dp.message(F.text)(self.text_handler)
    
    async def start_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await state.set_state(BotStates.choosing_program)
        
        keyboard = self._get_main_keyboard()
        
        welcome_text = (
            "üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ò–¢–ú–û!*\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –≤—Å—ë –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É:\n\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö\n"
            "‚Ä¢ –£—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –£—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã\n"
            "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def help_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/programs - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö\n"
            "/compare - –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí¨ *–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:*\n"
            "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è\n"
            "‚Ä¢ –°—Ä–æ–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –£—á–µ–±–Ω—ã–µ –∫—É—Ä—Å—ã\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
            "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
        )
        
        await message.answer(help_text, parse_mode="Markdown")
    
    async def programs_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /programs"""
        keyboard = self._get_programs_keyboard()
        
        text = (
            "üìö *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n\n"
            "ü§ñ **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç** - —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò\n\n"
            "üéØ **–ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def compare_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /compare"""
        comparison = self._compare_programs()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]])
        
        await message.answer(comparison, reply_markup=keyboard, parse_mode="Markdown")
    
    async def program_info_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        program_id = callback.data.split("_")[1]
        program_info = self._get_program_info(program_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", callback_data=f"curriculum_{program_id}")],
            [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data=f"contacts_{program_id}")],
            [InlineKeyboardButton(text="üéØ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data=f"admission_{program_id}")],
            [InlineKeyboardButton(text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="compare_programs")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await callback.message.edit_text(program_info, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    
    async def compare_programs_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º"""
        comparison = self._compare_programs()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]])
        
        await callback.message.edit_text(comparison, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    
    async def back_to_main_handler(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.set_state(BotStates.choosing_program)
        
        keyboard = self._get_main_keyboard()
        
        welcome_text = (
            "üéì *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:"
        )
        
        await callback.message.edit_text(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    
    async def text_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_question = message.text.lower()
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        answer = self._get_answer_for_question(user_question)
        
        if answer:
            await message.answer(answer, parse_mode="Markdown")
        else:
            await message.answer(
                "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è', '–∫–æ–≥–¥–∞ –ø–æ—Å—Ç—É–ø–∞—Ç—å', '–∫–æ–Ω—Ç–∞–∫—Ç—ã'"
            )
    
    def _get_main_keyboard(self) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ü—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="show_programs")],
            [InlineKeyboardButton(text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="compare_programs")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
        ])
    
    def _get_programs_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", callback_data="program_ai")],
            [InlineKeyboardButton(text="üéØ –ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö", callback_data="program_ai_product")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    
    def _get_program_info(self, program_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        if program_id not in self.data:
            return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        program = self.data[program_id]
        web_data = program.get('web_data', {})
        curriculum = program.get('curriculum_data', {})
        
        info = f"üéì *{web_data.get('program_title', '–ü—Ä–æ–≥—Ä–∞–º–º–∞')}*\n\n"
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        basic_info = web_data.get('basic_info', {})
        if basic_info:
            info += "üìã *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            for key, value in basic_info.items():
                if value:
                    info += f"‚Ä¢ {key.title()}: {value}\n"
            info += "\n"
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        directions = web_data.get('directions', [])
        if directions:
            info += "üéØ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:*\n"
            for direction in directions:
                info += f"‚Ä¢ {direction['code']} {direction['name']}\n"
                info += f"  –ë—é–¥–∂–µ—Ç: {direction['budget_places']}, –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {direction['contract_places']}\n"
            info += "\n"
        
        # –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
        if curriculum:
            info += f"üìö *–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω:*\n"
            info += f"‚Ä¢ –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {curriculum.get('total_courses', 0)}\n"
            info += f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–æ–≤: {curriculum.get('total_credits', 0)}\n"
            info += f"‚Ä¢ –ë–ª–æ–∫–æ–≤: {len(curriculum.get('blocks', []))}\n\n"
        
        return info
    
    def _compare_programs(self) -> str:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º"""
        if len(self.data) < 2:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        
        ai_data = self.data.get('ai', {}).get('web_data', {})
        ai_product_data = self.data.get('ai_product', {}).get('web_data', {})
        
        comparison = "üîÑ *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º*\n\n"
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        ai_cost = ai_data.get('basic_info', {}).get('—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–≥–æ–¥)', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        ai_product_cost = ai_product_data.get('basic_info', {}).get('—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–≥–æ–¥)', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        comparison += "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:*\n"
        comparison += f"‚Ä¢ –ò–ò: {ai_cost}\n"
        comparison += f"‚Ä¢ –ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö: {ai_product_cost}\n\n"
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        ai_directions = len(ai_data.get('directions', []))
        ai_product_directions = len(ai_product_data.get('directions', []))
        
        comparison += "üéØ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:*\n"
        comparison += f"‚Ä¢ –ò–ò: {ai_directions} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n"
        comparison += f"‚Ä¢ –ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö: {ai_product_directions} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n"
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        ai_curriculum = self.data.get('ai', {}).get('curriculum_data', {})
        ai_product_curriculum = self.data.get('ai_product', {}).get('curriculum_data', {})
        
        if ai_curriculum and ai_product_curriculum:
            comparison += "üìö *–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω:*\n"
            comparison += f"‚Ä¢ –ò–ò: {ai_curriculum.get('total_courses', 0)} –∫—É—Ä—Å–æ–≤\n"
            comparison += f"‚Ä¢ –ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö: {ai_product_curriculum.get('total_courses', 0)} –∫—É—Ä—Å–æ–≤\n\n"
        
        return comparison
    
    def _get_answer_for_question(self, question: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        keywords_map = {
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å': self._get_cost_info,
            '—Ü–µ–Ω–∞': self._get_cost_info,
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç': self._get_cost_info,
            '–∫–æ–Ω—Ç–∞–∫—Ç': self._get_contacts_info,
            '—Ç–µ–ª–µ—Ñ–æ–Ω': self._get_contacts_info,
            'email': self._get_contacts_info,
            '–º–µ–Ω–µ–¥–∂–µ—Ä': self._get_contacts_info,
            '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ': self._get_admission_info,
            '—ç–∫–∑–∞–º–µ–Ω': self._get_admission_info,
            '–∫–æ–≥–¥–∞ –ø–æ—Å—Ç—É–ø–∞—Ç—å': self._get_admission_info,
            '–∫—É—Ä—Å—ã': self._get_courses_info,
            '–ø—Ä–µ–¥–º–µ—Ç—ã': self._get_courses_info,
            '—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω': self._get_courses_info,
            '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': self._get_duration_info,
            '—Å—Ä–æ–∫': self._get_duration_info,
            '—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç': self._get_duration_info,
        }
        
        for keyword, handler in keywords_map.items():
            if keyword in question:
                return handler()
        
        return None
    
    def _get_cost_info(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        info = "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:*\n\n"
        
        for program_id, program_data in self.data.items():
            web_data = program_data.get('web_data', {})
            title = web_data.get('program_title', program_id)
            cost = web_data.get('basic_info', {}).get('—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–≥–æ–¥)', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            info += f"‚Ä¢ *{title}*: {cost}\n"
        
        return info
    
    def _get_contacts_info(self) -> str:
        """–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        info = "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n\n"
        
        for program_id, program_data in self.data.items():
            web_data = program_data.get('web_data', {})
            title = web_data.get('program_title', program_id)
            manager = web_data.get('manager_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
            contacts = web_data.get('manager_contacts', [])
            
            info += f"*{title}:*\n"
            info += f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager}\n"
            
            for contact in contacts:
                info += f"‚Ä¢ {contact}\n"
            
            info += "\n"
        
        return info
    
    def _get_admission_info(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏"""
        info = "üéØ *–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:*\n\n"
        
        for program_id, program_data in self.data.items():
            web_data = program_data.get('web_data', {})
            title = web_data.get('program_title', program_id)
            directions = web_data.get('directions', [])
            
            info += f"*{title}:*\n"
            
            for direction in directions:
                info += f"‚Ä¢ {direction['code']} {direction['name']}\n"
                info += f"  –ë—é–¥–∂–µ—Ç: {direction['budget_places']} –º–µ—Å—Ç\n"
                info += f"  –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {direction['contract_places']} –º–µ—Å—Ç\n"
            
            info += "\n"
        
        return info
    
    def _get_courses_info(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö"""
        info = "üìö *–£—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã:*\n\n"
        
        for program_id, program_data in self.data.items():
            web_data = program_data.get('web_data', {})
            curriculum = program_data.get('curriculum_data', {})
            title = web_data.get('program_title', program_id)
            
            info += f"*{title}:*\n"
            
            if curriculum:
                info += f"‚Ä¢ –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {curriculum.get('total_courses', 0)}\n"
                info += f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–æ–≤: {curriculum.get('total_credits', 0)}\n"
                
                blocks = curriculum.get('blocks', [])
                if blocks:
                    info += "‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏:\n"
                    for block in blocks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –±–ª–æ–∫–∞
                        info += f"  - {block['name']} ({block['total_credits']} –∑–µ—Ç)\n"
            else:
                info += "‚Ä¢ –î–∞–Ω–Ω—ã–µ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...\n"
            
            info += "\n"
        
        return info
    
    def _get_duration_info(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        info = "‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:*\n\n"
        
        for program_id, program_data in self.data.items():
            web_data = program_data.get('web_data', {})
            title = web_data.get('program_title', program_id)
            duration = web_data.get('basic_info', {}).get('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            info += f"‚Ä¢ *{title}*: {duration}\n"
        
        return info
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        await self.bot.session.close()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
    TOKEN = "YOUR_BOT_TOKEN_HERE"
    
    if TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN")
        return
    
    bot = ITMOBot(TOKEN)
    
    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main())