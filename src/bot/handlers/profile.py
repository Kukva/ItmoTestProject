import json
import logging
from pathlib import Path
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from ..states import ProfileSetup

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
profile_router = Router()

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ JSON)
PROFILES_DIR = Path(__file__).parent.parent.parent.parent / "data" / "profiles"
PROFILES_DIR.mkdir(exist_ok=True)

@profile_router.callback_query(F.data == "setup_profile")
async def start_profile_setup(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.set_state(ProfileSetup.education_background)
    
    text = (
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∫—É—Ä—Å–æ–≤.\n\n"
        "üéì *–í–æ–ø—Ä–æ—Å 1 –∏–∑ 7*\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–µ:\n"
        "‚Ä¢ –ö–∞–∫—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑—É—á–∞–µ—Ç–µ/–∏–∑—É—á–∞–ª–∏?\n"
        "‚Ä¢ –í –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–∏–ø–ª–æ–º?\n\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ë–∞–∫–∞–ª–∞–≤—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û\"_"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()
@profile_router.message(StateFilter(ProfileSetup.education_background))
async def process_education_background(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"""
    await state.update_data(education_background=message.text)
    await state.set_state(ProfileSetup.work_experience)
    
    text = (
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n"
        "üíº *–í–æ–ø—Ä–æ—Å 2 –∏–∑ 7*\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã:\n"
        "‚Ä¢ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ/—Ä–∞–±–æ—Ç–∞–ª–∏?\n" 
        "‚Ä¢ –ö–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∑–∞–Ω–∏–º–∞–µ—Ç–µ?\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞?\n\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"3 –≥–æ–¥–∞ Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ —Ñ–∏–Ω—Ç–µ—Ö –∫–æ–º–ø–∞–Ω–∏–∏\"_\n"
        "_–ò–ª–∏: \"–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª, —Ç–æ–ª—å–∫–æ —É—á—É—Å—å\"_"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_education")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@profile_router.message(StateFilter(ProfileSetup.work_experience))
async def process_work_experience(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    await state.update_data(work_experience=message.text)
    await state.set_state(ProfileSetup.interests)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    await state.update_data(selected_interests=[])
    
    await show_interests_menu(message, state, is_new_message=True)

async def show_interests_menu(message_or_callback, state: FSMContext, is_new_message: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
    data = await state.get_data()
    selected_interests = data.get('selected_interests', [])
    
    text = (
        "‚úÖ –ü–æ–Ω—è—Ç–Ω–æ!\n\n"
        "üéØ *–í–æ–ø—Ä–æ—Å 3 –∏–∑ 7*\n\n"
        "–ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
    if selected_interests:
        text += f"‚úÖ *–í—ã–±—Ä–∞–Ω–æ ({len(selected_interests)}):* {', '.join(selected_interests)}\n\n"
    else:
        text += "‚ùå *–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ*\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    interest_buttons = [
        ("ü§ñ Machine Learning", "interest_ml", "Machine Learning"),
        ("üß† Deep Learning", "interest_dl", "Deep Learning"),
        ("üëÅ Computer Vision", "interest_cv", "Computer Vision"),
        ("üí¨ NLP", "interest_nlp", "Natural Language Processing"),
        ("üîç Data Science", "interest_ds", "Data Science"),
        ("üéÆ Reinforcement Learning", "interest_rl", "Reinforcement Learning"),
        ("‚ö° MLOps", "interest_mlops", "MLOps"),
        ("üìä Business Analytics", "interest_ba", "Business Analytics")
    ]
    
    keyboard_buttons = []
    for button_text, callback_data, interest_name in interest_buttons:
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –≤—ã–±—Ä–∞–Ω
        if interest_name in selected_interests:
            display_text = f"‚úÖ {button_text}"
        else:
            display_text = f"‚ö™ {button_text}"
        
        keyboard_buttons.append([InlineKeyboardButton(text=display_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="interest_done")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_work")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if is_new_message:
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@profile_router.callback_query(F.data.startswith("interest_"))
async def process_interest_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    if callback.data == "interest_done":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        data = await state.get_data()
        selected_interests = data.get('selected_interests', [])
        
        if not selected_interests:
            await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", show_alert=True)
            return
        
        await state.update_data(interests=selected_interests)
        await state.set_state(ProfileSetup.career_goals)
        
        text = (
            "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n\n"
            "üéØ *–í–æ–ø—Ä–æ—Å 4 –∏–∑ 7*\n\n"
            "–ö–∞–∫–∏–µ —É –≤–∞—Å –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏? –ö–µ–º –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 2-3 –≥–æ–¥–∞?\n\n"
            "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–•–æ—á—É —Å—Ç–∞—Ç—å ML-–∏–Ω–∂–µ–Ω–µ—Ä–æ–º –≤ –∫—Ä—É–ø–Ω–æ–π IT-–∫–æ–º–ø–∞–Ω–∏–∏\" –∏–ª–∏ \"–ü–ª–∞–Ω–∏—Ä—É—é –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ò–ò-—Å—Ç–∞—Ä—Ç–∞–ø\"_"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_interests")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
    interest_map = {
        "interest_ml": "Machine Learning",
        "interest_dl": "Deep Learning", 
        "interest_cv": "Computer Vision",
        "interest_nlp": "Natural Language Processing",
        "interest_ds": "Data Science",
        "interest_rl": "Reinforcement Learning",
        "interest_mlops": "MLOps",
        "interest_ba": "Business Analytics"
    }
    
    interest_name = interest_map.get(callback.data)
    if not interest_name:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å")
        return
    
    data = await state.get_data()
    selected_interests = data.get('selected_interests', [])
    
    if interest_name in selected_interests:
        selected_interests.remove(interest_name)
        await callback.answer(f"‚ùå –£–±—Ä–∞–ª–∏: {interest_name}")
    else:
        selected_interests.append(interest_name)
        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏: {interest_name}")
    
    await state.update_data(selected_interests=selected_interests)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await show_interests_menu(callback, state, is_new_message=False)

@profile_router.callback_query(F.data == "back_to_interests")
async def back_to_interests(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    await state.set_state(ProfileSetup.interests)
    await show_interests_menu(callback, state, is_new_message=False)
    await callback.answer()

@profile_router.message(StateFilter(ProfileSetup.career_goals))
async def process_career_goals(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    await state.update_data(career_goals=message.text)
    await state.set_state(ProfileSetup.programming_skills)
    
    text = (
        "‚úÖ –ê–º–±–∏—Ü–∏–æ–∑–Ω–æ!\n\n"
        "üíª *–í–æ–ø—Ä–æ—Å 5 –∏–∑ 7*\n\n"
        "–ö–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–∞–¥–µ–µ—Ç–µ?\n"
        "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è:\n\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"Python (—Ö–æ—Ä–æ—à–æ), JavaScript (–±–∞–∑–æ–≤—ã–π), C++ (–∏–∑—É—á–∞—é)\"_\n"
        "_–ò–ª–∏: \"–ü–æ–∫–∞ –Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É—é, –ø–ª–∞–Ω–∏—Ä—É—é –∏–∑—É—á–∞—Ç—å\"_"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_goals")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@profile_router.message(StateFilter(ProfileSetup.programming_skills))
async def process_programming_skills(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.update_data(programming_skills=message.text)
    await state.set_state(ProfileSetup.ai_experience)
    
    text = (
        "‚úÖ –ü–æ–Ω—è—Ç–Ω–æ!\n\n"
        "ü§ñ *–í–æ–ø—Ä–æ—Å 6 –∏–∑ 7*\n\n"
        "–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º?\n\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ü—Ä–æ—Ö–æ–¥–∏–ª –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ ML, –¥–µ–ª–∞–ª –ø–µ—Ç-–ø—Ä–æ–µ–∫—Ç—ã\" –∏–ª–∏ \"–ü–æ–ª–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫ –≤ –ò–ò\"_"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_programming")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@profile_router.message(StateFilter(ProfileSetup.ai_experience))
async def process_ai_experience(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ —Å –ò–ò"""
    await state.update_data(ai_experience=message.text)
    await state.set_state(ProfileSetup.learning_preferences)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –æ–±—É—á–µ–Ω–∏–∏
    await state.update_data(learning_preferences=[])
    
    await show_learning_preferences_menu(message, state, is_new_message=True)

async def show_learning_preferences_menu(message_or_callback, state: FSMContext, is_new_message: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –æ–±—É—á–µ–Ω–∏–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
    data = await state.get_data()
    learning_preferences = data.get('learning_preferences', [])
    
    text = (
        "‚úÖ –•–æ—Ä–æ—à–æ!\n\n"
        "üìö *–í–æ–ø—Ä–æ—Å 7 –∏–∑ 7*\n\n"
        "–ö–∞–∫ –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —É—á–∏—Ç—å—Å—è?\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
    if learning_preferences:
        text += f"‚úÖ *–í—ã–±—Ä–∞–Ω–æ ({len(learning_preferences)}):* {', '.join(learning_preferences)}\n\n"
    else:
        text += "‚ùå *–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ*\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    learning_buttons = [
        ("üìñ –¢–µ–æ—Ä–∏—è –∏ –ª–µ–∫—Ü–∏–∏", "learn_theory", "–¢–µ–æ—Ä–∏—è –∏ –ª–µ–∫—Ü–∏–∏"),
        ("üíª –ü—Ä–∞–∫—Ç–∏–∫–∞ –∏ –ø—Ä–æ–µ–∫—Ç—ã", "learn_practice", "–ü—Ä–∞–∫—Ç–∏–∫–∞ –∏ –ø—Ä–æ–µ–∫—Ç—ã"),
        ("üë• –ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", "learn_group", "–ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞"),
        ("üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞", "learn_research", "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞"),
        ("üè¢ –°–≤—è–∑—å —Å –∏–Ω–¥—É—Å—Ç—Ä–∏–µ–π", "learn_industry", "–°–≤—è–∑—å —Å –∏–Ω–¥—É—Å—Ç—Ä–∏–µ–π")
    ]
    
    keyboard_buttons = []
    for button_text, callback_data, pref_name in learning_buttons:
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ
        if pref_name in learning_preferences:
            display_text = f"‚úÖ {button_text}"
        else:
            display_text = f"‚ö™ {button_text}"
        
        keyboard_buttons.append([InlineKeyboardButton(text=display_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="learn_done")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ai_exp")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if is_new_message:
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@profile_router.callback_query(F.data.startswith("learn_"))
async def process_learning_preferences(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –æ–±—É—á–µ–Ω–∏–∏"""
    if callback.data == "learn_done":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è  
        data = await state.get_data()
        learning_prefs = data.get('learning_preferences', [])
        
        if not learning_prefs:
            await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è", show_alert=True)
            return
        
        await state.set_state(ProfileSetup.profile_confirmation)
        await show_profile_summary(callback, state)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ
    learning_map = {
        "learn_theory": "–¢–µ–æ—Ä–∏—è –∏ –ª–µ–∫—Ü–∏–∏",
        "learn_practice": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –∏ –ø—Ä–æ–µ–∫—Ç—ã",
        "learn_group": "–ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", 
        "learn_research": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞",
        "learn_industry": "–°–≤—è–∑—å —Å –∏–Ω–¥—É—Å—Ç—Ä–∏–µ–π"
    }
    
    pref_name = learning_map.get(callback.data)
    if not pref_name:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ")
        return
    
    data = await state.get_data()
    learning_prefs = data.get('learning_preferences', [])
    
    if pref_name in learning_prefs:
        learning_prefs.remove(pref_name)
        await callback.answer(f"‚ùå –£–±—Ä–∞–ª–∏: {pref_name}")
    else:
        learning_prefs.append(pref_name)
        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏: {pref_name}")
    
    await state.update_data(learning_preferences=learning_prefs)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await show_learning_preferences_menu(callback, state, is_new_message=False)

@profile_router.callback_query(F.data == "back_to_ai_exp")
async def back_to_ai_exp(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –æ–ø—ã—Ç–µ —Å –ò–ò"""
    await state.set_state(ProfileSetup.learning_preferences)
    await show_learning_preferences_menu(callback, state, is_new_message=False)
    await callback.answer()

async def show_profile_summary(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    
    text = (
        "üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤!*\n\n"
        f"üéì *–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:* {data.get('education_background', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n\n"
        f"üíº *–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:* {data.get('work_experience', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n\n"
        f"üéØ *–ò–Ω—Ç–µ—Ä–µ—Å—ã:* {', '.join(data.get('interests', []))}\n\n"
        f"üöÄ *–¶–µ–ª–∏:* {data.get('career_goals', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n\n"  
        f"üíª *–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:* {data.get('programming_skills', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n\n"
        f"ü§ñ *–û–ø—ã—Ç —Å –ò–ò:* {data.get('ai_experience', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n\n"
        f"üìö *–û–±—É—á–µ–Ω–∏–µ:* {', '.join(data.get('learning_preferences', []))}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="save_profile")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_profile")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@profile_router.callback_query(F.data == "save_profile", StateFilter(ProfileSetup.profile_confirmation))
async def save_user_profile(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    user_id = callback.from_user.id
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_data = {
        "user_id": user_id,
        "username": callback.from_user.username,
        "first_name": callback.from_user.first_name,
        "education_background": data.get('education_background'),
        "work_experience": data.get('work_experience'),
        "interests": data.get('interests', []),
        "career_goals": data.get('career_goals'),
        "programming_skills": data.get('programming_skills'),
        "ai_experience": data.get('ai_experience'),
        "learning_preferences": data.get('learning_preferences', []),
        "created_at": str(callback.message.date)
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    profile_file = PROFILES_DIR / f"user_{user_id}.json"
    try:
        with open(profile_file, 'w', encoding='utf-8') as f:
            json.dump(profile_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {profile_file}")
        
        text = (
            "‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n\n"
            "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –¥–∞—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:\n"
            "‚Ä¢ –í—ã–±–æ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏–∑—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤\n"
            "‚Ä¢ –í—ã–±–æ—Ä–Ω—ã–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")],
            [InlineKeyboardButton(text="üìö –ò–∑—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="show_programs")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
        await state.clear()
    
    await callback.answer()

@profile_router.callback_query(F.data == "cancel_profile")
async def cancel_profile_setup(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.clear()
    
    text = "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∑–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def get_user_profile(user_id: int) -> Dict[str, Any] | None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile_file = PROFILES_DIR / f"user_{user_id}.json"
    
    if not profile_file.exists():
        return None
    
    try:
        with open(profile_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None