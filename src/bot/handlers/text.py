import logging
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
text_router = Router()

@text_router.message(F.text)
async def text_handler(message: Message, state: FSMContext, bot_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_question = message.text.lower()
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    answer = _get_answer_for_question(user_question, bot_instance)
    
    if answer:
        await message.answer(answer, parse_mode="Markdown")
    else:
        await message.answer(
            "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.\n\n"
            "üí° *–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å* - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*\n"
            "‚Ä¢ \"—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è\"\n"
            "‚Ä¢ \"–∫–æ–≥–¥–∞ –ø–æ—Å—Ç—É–ø–∞—Ç—å\"\n"
            "‚Ä¢ \"–∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞\"\n"
            "‚Ä¢ \"–∫–∞–∫–∏–µ –∫—É—Ä—Å—ã –∏–∑—É—á–∞—Ç—å\""
        )

def _get_answer_for_question(question: str, bot_instance) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
    keywords_map = {
        '—Å—Ç–æ–∏–º–æ—Å—Ç—å': lambda: bot_instance._get_cost_info(),
        '—Ü–µ–Ω–∞': lambda: bot_instance._get_cost_info(),
        '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç': lambda: bot_instance._get_cost_info(),
        '–∫–æ–Ω—Ç–∞–∫—Ç': lambda: bot_instance._get_contacts_info(),
        '—Ç–µ–ª–µ—Ñ–æ–Ω': lambda: bot_instance._get_contacts_info(),
        'email': lambda: bot_instance._get_contacts_info(),
        '–º–µ–Ω–µ–¥–∂–µ—Ä': lambda: bot_instance._get_contacts_info(),
        '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ': lambda: bot_instance._get_admission_info(),
        '—ç–∫–∑–∞–º–µ–Ω': lambda: bot_instance._get_admission_info(),
        '–∫–æ–≥–¥–∞ –ø–æ—Å—Ç—É–ø–∞—Ç—å': lambda: bot_instance._get_admission_info(),
        '–∫—É—Ä—Å—ã': lambda: bot_instance._get_courses_info(),
        '–ø—Ä–µ–¥–º–µ—Ç—ã': lambda: bot_instance._get_courses_info(),
        '—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω': lambda: bot_instance._get_courses_info(),
        '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': lambda: bot_instance._get_duration_info(),
        '—Å—Ä–æ–∫': lambda: bot_instance._get_duration_info(),
        '—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç': lambda: bot_instance._get_duration_info(),
        '–ø—Ä–æ—Ñ–∏–ª—å': lambda: _get_profile_help(),
        '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': lambda: _get_recommendations_help(),
        '–ø–æ–º–æ—â—å': lambda: _get_general_help(),
    }
    
    for keyword, handler in keywords_map.items():
        if keyword in question:
            return handler()
    
    return None

def _get_profile_help() -> str:
    """–ü–æ–º–æ—â—å –ø–æ –ø—Ä–æ—Ñ–∏–ª—é"""
    return (
        "üìù *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å:\n"
        "‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤\n"
        "‚Ä¢ üìö –ü–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ üéì –ü–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω\n\n"
        "–ù–∞–∂–º–∏—Ç–µ *\"üìù –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\"* –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è!"
    )

def _get_recommendations_help() -> str:
    """–ü–æ–º–æ—â—å –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º"""
    return (
        "üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
        "1. üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 7 –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
        "2. üéØ –ù–∞–∂–∞—Ç—å \"–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\"\n\n"
        "–Ø –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
        "‚Ä¢ –í–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –æ–ø—ã—Ç–∞\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò\n"
        "‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
        "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –æ–±—É—á–µ–Ω–∏–∏"
    )

def _get_general_help() -> str:
    """–û–±—â–∞—è –ø–æ–º–æ—â—å"""
    return (
        "ü§ñ *–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å:*\n\n"
        "üìù *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* - —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "üìö *–ü—Ä–æ–≥—Ä–∞–º–º—ã* - –∏–∑—É—á–∏—Ç–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
        "üîÑ *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ* - —Å—Ä–∞–≤–Ω–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ–∂–¥—É —Å–æ–±–æ–π\n"
        "üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏* - –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
        "*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –°—Ä–æ–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
        "‚Ä¢ –£—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ –∫—É—Ä—Å—ã"
    )