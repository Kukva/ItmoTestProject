import logging
from typing import Dict, Any
from pathlib import Path

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from ..states import BotStates
from .profile import get_user_profile

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
basic_router = Router()

@basic_router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.set_state(BotStates.choosing_program)
    
    keyboard = _get_main_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å
    user_profile = get_user_profile(message.from_user.id)
    
    if user_profile:
        welcome_text = (
            f"üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!*\n\n"
            "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ò–¢–ú–û –ø–æ –ò–ò.\n\n"
            "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω\n"
            "üéØ –ì–æ—Ç–æ–≤ –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    else:
        welcome_text = (
            f"üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!*\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ò–¢–ú–û –ø–æ –ò–ò –∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.\n\n"
            "üí° *–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è* - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—É—Ä—Å–∞–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

@basic_router.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/programs - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö\n"
        "/compare - –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üí¨ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
        "‚Ä¢ üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤\n"
        "‚Ä¢ üìÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤\n"
        "‚Ä¢ üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤!"
    )
    
    await message.answer(help_text, parse_mode="Markdown")

@basic_router.callback_query(F.data == "show_help")
async def show_help_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "üìù *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* - —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
        "üìö *–ü—Ä–æ–≥—Ä–∞–º–º—ã* - –∏–∑—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
        "üîÑ *–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã* - —Å—Ä–∞–≤–Ω–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ–∂–¥—É —Å–æ–±–æ–π\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    ]])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@basic_router.callback_query(F.data == "setup_profile")
async def setup_profile_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'"""
    user_id = callback.from_user.id
    user_profile = get_user_profile(user_id)
    
    if user_profile:
        # –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        await show_existing_profile(callback, user_profile)
    else:
        # –ü—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é
        from .profile import start_profile_setup
        await start_profile_setup(callback, state)

async def show_existing_profile(callback: CallbackQuery, profile_data: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"üéì *–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:* {profile_data.get('education_background', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}{'...' if len(profile_data.get('education_background', '')) > 50 else ''}\n\n"
        f"üíº *–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:* {profile_data.get('work_experience', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}{'...' if len(profile_data.get('work_experience', '')) > 50 else ''}\n\n"
        f"üéØ *–ò–Ω—Ç–µ—Ä–µ—Å—ã:* {', '.join(profile_data.get('interests', []))}\n\n"
        f"üöÄ *–¶–µ–ª–∏:* {profile_data.get('career_goals', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}{'...' if len(profile_data.get('career_goals', '')) > 50 else ''}\n\n"
        f"üíª *–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:* {profile_data.get('programming_skills', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}{'...' if len(profile_data.get('programming_skills', '')) > 50 else ''}\n\n"
        f"ü§ñ *–û–ø—ã—Ç —Å –ò–ò:* {profile_data.get('ai_experience', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}{'...' if len(profile_data.get('ai_experience', '')) > 50 else ''}\n\n"
        f"üìö *–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –æ–±—É—á–µ–Ω–∏–∏:* {', '.join(profile_data.get('learning_preferences', []))}\n\n"
        f"üìÖ *–°–æ–∑–¥–∞–Ω:* {profile_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="delete_profile")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@basic_router.callback_query(F.data == "edit_profile")
async def edit_profile_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    from .profile import start_profile_setup
    await start_profile_setup(callback, state)
    await callback.answer()

@basic_router.callback_query(F.data == "delete_profile")
async def delete_profile_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    text = (
        "üóë *–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_profile")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="setup_profile")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@basic_router.callback_query(F.data == "confirm_delete_profile")
async def confirm_delete_profile_handler(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è
    profiles_dir = Path(__file__).parent.parent.parent.parent / "data" / "profiles"
    profile_file = profiles_dir / f"user_{user_id}.json"
    
    try:
        if profile_file.exists():
            profile_file.unlink()
            text = "‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω*\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
        else:
            text = "‚ö†Ô∏è *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        text = "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@basic_router.callback_query(F.data == "get_recommendations")
async def get_recommendations_handler(callback: CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    user_id = callback.from_user.id
    user_profile = get_user_profile(user_id)
    
    if not user_profile:
        text = (
            "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
        recommendations = generate_recommendations(user_profile)
        
        text = f"üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*\n\n{recommendations}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ò–∑—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="show_programs")],
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

def generate_recommendations(profile: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    recommendations = []
    
    interests = profile.get('interests', [])
    learning_prefs = profile.get('learning_preferences', [])
    ai_experience = profile.get('ai_experience', '').lower()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    if 'Machine Learning' in interests or 'Deep Learning' in interests:
        if '–Ω–æ–≤–∏—á–æ–∫' in ai_experience or '–Ω–µ –∏–º–µ—é' in ai_experience:
            recommendations.append("üéì *–ü—Ä–æ–≥—Ä–∞–º–º–∞*: –†–µ–∫–æ–º–µ–Ω–¥—É—é \"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\" - –±–æ–ª–µ–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞")
        else:
            recommendations.append("üéì *–ü—Ä–æ–≥—Ä–∞–º–º–∞*: –ü–æ–¥—Ö–æ–¥—è—Ç –æ–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –Ω–æ \"–ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö\" –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—É—Ä—Å–∞–º
    if '–ü—Ä–∞–∫—Ç–∏–∫–∞ –∏ –ø—Ä–æ–µ–∫—Ç—ã' in learning_prefs:
        recommendations.append("üíª *–ö—É—Ä—Å—ã*: –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")
    
    if '–¢–µ–æ—Ä–∏—è –∏ –ª–µ–∫—Ü–∏–∏' in learning_prefs:
        recommendations.append("üìñ *–ö—É—Ä—Å—ã*: –ü–æ–¥–æ–π–¥—É—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Å–Ω–æ–≤–∞–º –ò–ò")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
    programming_skills = profile.get('programming_skills', '').lower()
    if 'python' not in programming_skills:
        recommendations.append("üêç *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞*: –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å Python - –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò")
    
    return '\n\n'.join(recommendations) if recommendations else "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."

@basic_router.callback_query(F.data == "back_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.set_state(BotStates.choosing_program)
    
    keyboard = _get_main_keyboard()
    
    welcome_text = (
        "üéì *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:"
    )
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@basic_router.message(Command("clear"))
async def clear_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    keyboard = _get_main_keyboard()
    
    text = (
        "üîÑ *–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ*\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

def _get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile")],
        [InlineKeyboardButton(text="üìö –ü—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="show_programs")],
        [InlineKeyboardButton(text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="compare_programs")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
    ])