import logging
from pathlib import Path
from typing import Dict, Any, Optional

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..states import BotStates

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º
programs_router = Router()

@programs_router.message(Command("programs"))
async def programs_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /programs"""
    keyboard = _get_programs_keyboard()
    
    text = (
        "üìö *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n\n"
        "ü§ñ **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç** - —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò\n\n"
        "üéØ **–ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@programs_router.message(Command("compare"))
async def compare_handler(message: Message, bot_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /compare"""
    comparison = bot_instance._compare_programs()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    ]])
    
    await message.answer(comparison, reply_markup=keyboard, parse_mode="Markdown")

@programs_router.callback_query(F.data == "show_programs")
async def show_programs_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≥—Ä–∞–º–º—ã'"""
    keyboard = _get_programs_keyboard()
    
    text = (
        "üìö *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n\n"
        "ü§ñ **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç** - —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò\n\n"
        "üéØ **–ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@programs_router.callback_query(F.data == "compare_programs")
async def compare_programs_handler(callback: CallbackQuery, bot_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º"""
    comparison = bot_instance._compare_programs()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    ]])
    
    await callback.message.edit_text(comparison, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@programs_router.callback_query(F.data.startswith("program_"))
async def program_info_handler(callback: CallbackQuery, bot_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º program_id
    callback_parts = callback.data.split("_")
    if len(callback_parts) == 2:  # program_ai
        program_id = callback_parts[1]
    else:  # program_ai_product
        program_id = "_".join(callback_parts[1:])  # ai_product
    
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞: {program_id}")
    
    program_info = bot_instance._get_program_info(program_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", callback_data=f"curriculum_{program_id}")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data=f"contacts_{program_id}")],
        [InlineKeyboardButton(text="üéØ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data=f"admission_{program_id}")],
        [InlineKeyboardButton(text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="compare_programs")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(program_info, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@programs_router.callback_query(F.data.startswith("curriculum_"))
async def curriculum_handler(callback: CallbackQuery, bot_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º program_id
    callback_parts = callback.data.split("_")
    if len(callback_parts) == 2:  # curriculum_ai
        program_id = callback_parts[1]
    else:  # curriculum_ai_product
        program_id = "_".join(callback_parts[1:])  # ai_product
    
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program_id}")
    
    await bot_instance._show_curriculum_menu(callback, program_id, edit_message=True)
    await callback.answer()

@programs_router.callback_query(F.data.startswith("contacts_"))
async def contacts_handler(callback: CallbackQuery, bot_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º program_id
    callback_parts = callback.data.split("_")
    if len(callback_parts) == 2:  # contacts_ai
        program_id = callback_parts[1]
    else:  # contacts_ai_product
        program_id = "_".join(callback_parts[1:])  # ai_product
    
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program_id}")
    
    contacts_info = bot_instance._get_program_contacts(program_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"program_{program_id}")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(contacts_info, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@programs_router.callback_query(F.data.startswith("admission_"))
async def admission_handler(callback: CallbackQuery, bot_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏"""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º program_id
    callback_parts = callback.data.split("_")
    if len(callback_parts) == 2:  # admission_ai
        program_id = callback_parts[1]
    else:  # admission_ai_product
        program_id = "_".join(callback_parts[1:])  # ai_product
    
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program_id}")
    
    admission_info = bot_instance._get_admission_info_detailed(program_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"program_{program_id}")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(admission_info, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@programs_router.callback_query(F.data.startswith("download_pdf_"))
async def download_pdf_handler(callback: CallbackQuery, bot_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º program_id
    callback_parts = callback.data.split("_")
    if len(callback_parts) == 3:  # download_pdf_ai
        program_id = callback_parts[2]
    else:  # download_pdf_ai_product
        program_id = "_".join(callback_parts[2:])  # ai_product
    
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await callback.answer("üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é PDF —Ñ–∞–π–ª...", show_alert=False)
    
    try:
        # –ò—â–µ–º PDF —Ñ–∞–π–ª
        pdf_path = bot_instance._find_pdf_file(program_id)
        
        if not pdf_path or not pdf_path.exists():
            await callback.message.answer("‚ùå PDF —Ñ–∞–π–ª —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
        program = bot_instance.data.get(program_id, {})
        web_data = program.get('web_data', {})
        program_title = web_data.get('program_title', '–ü—Ä–æ–≥—Ä–∞–º–º–∞')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        pdf_file = FSInputFile(pdf_path)
        caption = f"üìö –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω\nüéì {program_title}\nüìÑ –§–∞–π–ª: {pdf_path.name}"
        
        await callback.message.answer_document(
            document=pdf_file,
            caption=caption
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        await bot_instance._show_curriculum_menu(callback, program_id, success_message="‚úÖ PDF —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF —Ñ–∞–π–ª–∞.")

def _get_programs_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", callback_data="program_ai")],
        [InlineKeyboardButton(text="üéØ –ò–ò –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö", callback_data="program_ai_product")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])