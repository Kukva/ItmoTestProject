
import asyncio
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from src.parsers.web_parser import parse_web_page
from src.parsers.pdf_manager import PDFManager
from src.parsers.data_manager import DataManager

class ITMOParser:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –ò–¢–ú–û"""
    
    def __init__(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        current_dir = Path(__file__).resolve()
        project_root = current_dir.parent.parent
        
        self.data_manager = DataManager(project_root)
        self.pdf_manager = PDFManager(self.data_manager.pdf_dir)
        
        self.programs = {
            'ai': 'https://abit.itmo.ru/program/master/ai',
            'ai_product': 'https://abit.itmo.ru/program/master/ai_product'
        }
    
    async def parse_program(self, program_id: str, url: str) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program_id}")
        
        result = {
            'program_id': program_id,
            'url': url,
            'parsed_at': datetime.now().isoformat(),
            'web_data': None,
            'curriculum_data': None
        }
        
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        web_data = await parse_web_page(url)
        if web_data:
            result['web_data'] = web_data
            print(f"‚úÖ –í–µ–±-–¥–∞–Ω–Ω—ã–µ: {web_data['program_title']}")
        
        # 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ PDF
        if web_data and web_data['pdf_links']:
            for pdf_link in web_data['pdf_links']:
                if '—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω' in pdf_link['text'].lower():
                    pdf_url = pdf_link['href']
                    if not pdf_url.startswith('http'):
                        pdf_url = 'https://abit.itmo.ru' + pdf_url
                    
                    curriculum_data = await self._parse_curriculum_pdf(pdf_url, program_id)
                    if curriculum_data:
                        result['curriculum_data'] = curriculum_data
                        print(f"‚úÖ PDF –¥–∞–Ω–Ω—ã–µ: {curriculum_data['total_courses']} –∫—É—Ä—Å–æ–≤")
                    break
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö PDF —Ñ–∞–π–ª–æ–≤
        if not result['curriculum_data']:
            local_pdf = self.pdf_manager.find_local_pdf(program_id)
            if local_pdf:
                curriculum_data = self.pdf_manager.parse_local_pdf(local_pdf)
                if curriculum_data:
                    result['curriculum_data'] = curriculum_data
                    print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π PDF: {curriculum_data['total_courses']} –∫—É—Ä—Å–æ–≤")
        
        return result
    
    async def _parse_curriculum_pdf(self, pdf_url: str, program_id: str) -> dict:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ PDF"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º PDF
            pdf_path = await self.pdf_manager.download_pdf(pdf_url, program_id)
            if pdf_path:
                return self.pdf_manager.parse_local_pdf(pdf_path)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ PDF –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        
        return None
    
    async def parse_all_programs(self) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û")
        print("=" * 50)
        
        all_results = {}
        
        for program_id, url in self.programs.items():
            result = await self.parse_program(program_id, url)
            all_results[program_id] = result
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.data_manager.save_results(all_results)
        return all_results
    
    def print_summary(self, results: dict):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: {len(results)}")
        
        for program_id, data in results.items():
            web_status = "‚úÖ" if data['web_data'] else "‚ùå"
            pdf_status = "‚úÖ" if data['curriculum_data'] else "‚ùå"
            
            title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            courses_count = 0
            
            if data['web_data']:
                title = data['web_data']['program_title']
            
            if data['curriculum_data']:
                courses_count = data['curriculum_data']['total_courses']
            
            print(f"\nüìö {program_id}: {title}")
            print(f"   –í–µ–±-–¥–∞–Ω–Ω—ã–µ: {web_status}")
            print(f"   PDF-–¥–∞–Ω–Ω—ã–µ: {pdf_status}")
            if courses_count > 0:
                print(f"   –ö—É—Ä—Å–æ–≤: {courses_count}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéì–ü–∞—Ä—Å–µ—Ä –ò–¢–ú–û")
    print("=" * 50)
    
    parser = ITMOParser()
    
    try:
        results = await parser.parse_all_programs()
        parser.print_summary(results)
        
    except KeyboardInterrupt:
        print("\nüõë –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    asyncio.run(main())